package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"errors"
	"fmt"

	"github.com/bperezgo/tshirt_ai/graph/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateCustomizedProduct is the resolver for the createCustomizedProduct field.
func (r *mutationResolver) CreateCustomizedProduct(ctx context.Context, input model.NewCustomizedProduct) (*model.CustomizedProduct, error) {
	panic(fmt.Errorf("not implemented: CreateCustomizedProduct - createCustomizedProduct"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	domainProducts, err := r.productsRepository.FindAll()

	if err != nil {
		return nil, gqlerror.Errorf("domainProducts not found error")
	}

	modelProducts := []*model.Product{}

	for _, domainProduct := range domainProducts {
		modelProduct := &model.Product{
			ID:    domainProduct.ID,
			Title: domainProduct.Title,
			Description: &model.Description{
				Short: domainProduct.Description,
				Long:  domainProduct.Description,
				HTML:  domainProduct.Description,
			},
			Price:  domainProduct.Price,
			Images: domainProduct.Images,
		}

		modelProducts = append(modelProducts, modelProduct)
	}

	return modelProducts, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	domainProducts, err := r.productsRepository.FindAll()

	if err != nil {
		return nil, err
	}

	for _, domainProduct := range domainProducts {
		if domainProduct.ID == id {
			return &model.Product{
				ID:    domainProduct.ID,
				Title: domainProduct.Title,
				Description: &model.Description{
					Short: domainProduct.Description,
					Long:  domainProduct.Description,
					HTML:  domainProduct.Description,
				},
				Price:  domainProduct.Price,
				Images: domainProduct.Images,
			}, nil
		}
	}

	return nil, &gqlerror.Error{
		Err:     errors.New("product not found error"),
		Message: "product not found error",
		Extensions: map[string]interface{}{
			"code": "404",
		},
	}
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
